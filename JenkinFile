pipeline{
    agent any
        stages{
            stage('SCM Checkout'){
                steps{
                    git branch: 'main', url: 'https://github.com/mukeshjava92/demo_counter_app.git'
                }
            }
            stage('Unit Testing'){
                steps{
                   sh 'mvn test'
                }
            }
            stage('Integration Testing'){
                steps{
                   sh 'mvn verify -DskipUnitTests'
                }
            }
            stage('Maven Build'){
                steps{
                   sh 'mvn clean install '
                }
            }
              stage('Sonarqube analysis'){
                steps{
                  script{
                         withSonarQubeEnv(credentialsId: 'sonarqube') {
                         sh ' mvn clean package sonar:sonar'
                       }
                   } 
                }
            }
            stage('Quality Gate Analysis'){
                steps{
                  script{
                      waitForQualityGate abortPipeline: false, credentialsId: 'sonarqube'
                   } 
                }
            }
            stage('Push Artifact to Nexus Repo'){
                steps{
                 script{

                  def readPomVersion = readMavenPom file: 'pom.xml'
                  def version= readPomVersion.version
                  def nexusRepo = readPomVersion.version.endsWith("SNAPSHOT") ? "springboot_new_snashot" : "demo_sprintboot"
                  def nexusUrl1 = 'http://65.2.123.116:8081/repository/demo_sprintboot/com/example/springboot/${version}/springboot-${version}.jar$'
                  def artifactExists = sh(script: "curl --output /dev/null --silent --head --fail ${nexusUrl1}; echo \$?", returnStatus: true)
                 if (artifactExists == 0){
                    echo "Artifact exists. Skipping this stage."
                 } 
                 else
                 {  
                  nexusArtifactUploader artifacts: [
                    [artifactId: 'springboot',
                     classifier: '', 
                     file: 'target/Uber.jar', 
                     type: 'jar']
                     ],
                      credentialsId: 'nexus-auth',
                       groupId: 'com.example',
                       nexusUrl: '65.2.123.116:8081',
                       nexusVersion: 'nexus3', 
                       protocol: 'http',
                       repository: "${nexusRepo}",
                       version: "${readPomVersion.version}"
                       return
                  }
                 }
                }  
            }
             stage('Docker image build'){
                steps{
                  script{
                      sh 'docker image build -t $JOB_NAME:v1.$BUILD_ID .'
                      sh 'docker image tag $JOB_NAME:v1.$BUILD_ID mukeshjava92/$JOB_NAME:v1.$BUILD_ID'
                   } 
                }
            }
            stage('Push docker image to docker-hub'){
                steps{
                  script{
                      withCredentials([string(credentialsId: 'docker_cred', variable: 'dockerhub')]) {
                       sh 'docker login -u mukeshjava92 -p "${dockerhub}"'
                       sh 'docker image push mukeshjava92/$JOB_NAME:v1.$BUILD_ID' 
                      }
                   } 
                }
            }
        }
}